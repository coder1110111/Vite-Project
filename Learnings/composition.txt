CONCEPT OF COMPOSITION

The way in which we combine multiple smaller components to build a bigger/complex component
or a web page, This practice is called COMPOSITION


Composition can be of Two Types-->
1. Nested Components (Parent-Child) :-- App->Expenses->ExpenseItem->ExpenseDate Like we have previously done

2. Wrapper Components :-- They are additional elements that we use to wrap around multiple component that we want to return using a single return statement. Like how i did it in all complex components.

GPT EXPLAINATION ::-->>

Absolutely! In React.js, composition is a flexible concept, and there are several types or patterns of composition that developers commonly use to build scalable and reusable UI components.

🧩 1. Children-Based Composition (Basic Composition)
Pass content as props.children to a wrapper component.
    🔧 Example:
    function Card({ children }) {
    return <div className="card">{children}</div>;
    }

    <Card>
    <h1>Title</h1>
    <p>Content here</p>
    </Card>

✅ Best for wrappers, layout boxes, modals, etc.

🧩 2. Slot-Based Composition (Named Props)
Instead of just children, you pass multiple named props (slots) to control different sections of the UI.

    🔧 Example:
    function Layout({ header, sidebar, content }) {
    return (
        <div>
        <header>{header}</header>
        <aside>{sidebar}</aside>
        <main>{content}</main>
        </div>
    );
    }

    <Layout
    header={<h1>Dashboard</h1>}
    sidebar={<Menu />}
    content={<Dashboard />}
    />

✅ Best for customizable page layouts or dashboard-style UIs.

🧩 3. Function-as-Child / Render Props
Pass a function as a child or prop, which the component calls to render dynamic UI.

    🔧 Example:
    function DataFetcher({ render }) {
    const data = { name: "Ayush" };
    return render(data);
    }

    <DataFetcher render={(data) => <p>{data.name}</p>} />

✅ Best for reusing logic across components while customizing rendering.

🧩 4. Higher-Order Components (HOC)
A function that takes a component and returns a new one with added behavior.

    🔧 Example:
    function withLogger(WrappedComponent) {
        return function Enhanced(props) {
            console.log("Props:", props);
            return <WrappedComponent {...props} />;
        };
    }

✅ Used for cross-cutting concerns like logging, auth checks, theme, etc.

⚠️ Less preferred now; often replaced by hooks or context.

🧩 5. Compound Components
A parent component coordinates its children components internally via context or props.

    🔧 Example:
    function Tabs({ children }) {
        return <div className="tabs">{children}</div>;
    }

    Tabs.Tab = function ({ label, children }) {
        return <div>{label}: {children}</div>;
    };

    <Tabs>
    <Tabs.Tab label="Home">Welcome</Tabs.Tab>
    <Tabs.Tab label="Profile">User Info</Tabs.Tab>
    </Tabs>
✅ Great for custom UI components like tabs, dropdowns, accordions, etc.

🔚 Summary Table

| Type                     | Use Case                                 | Key Prop/Pattern                       |
| ------------------------ | ---------------------------------------- | -------------------------------------- |
| **Children Composition** | Wrap content                             | `props.children`                       |
| **Slot Composition**     | Layouts with named sections              | named props (`header`, `footer`, etc.) |
| **Render Props**         | Custom logic + flexible rendering        | function as prop                       |
| **HOC**                  | Reusable behavior (less preferred today) | Component as input                     |
| **Compound Components**  | Custom UI with internal communication    | Shared context / props                 |
